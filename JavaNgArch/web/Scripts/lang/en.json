{
"Message":"-----------------------------------------------按钮文本和提示信息",
"Welcome1":"RainyArch - more than frameworks for agile development！",
"Welcome2":"Use this application prototype to get the first round iteration of your project done！",
"Sample":"Sample",
"System":"System",
"Personal":"Personal",
"Login":"log in",
"Logout":"Log out",
"Register":"Register",
"Chinese":"中文",
"English":"English",
"Code":"user name",
"Login_Wrong":"Wrong login",
"ChangePass":"Change Password",
"OldPassword":"Old Password",
"NewPassword":"New Password",
"ConfirmPassword":"Confirm Password",
"Search":"Search",
"Delete":"Delete",
"Save":"Save",
"Select":"Select",
"Navrefresh":"Refresh",
"Navback":"Back",
"List":"List",
"Edit":"Edit",
"Add":"Add",
"PassEdit":"Change Password",
"Save_Successfully":"Save_Successfully",
"true":"Yes",
"false":"No",
"any":"any",
"-choose-":"---choose---",
"-all-":"---all---",
"Current":"Current",
"Page":"Page",
"PrevPage":"Prev",
"NextPage":"Next",
"LastPage":"Last",
"FirstPage":"First",
"Total":"Total",
"EachPage":"Each Page",
"Line":"rows",
"Record":"Records",
"Gotopage":"Go",
"AuthFailure":"No permission！",
"OldPassword_Wrong":"Old password was Wrong!",
"OperationSucceed":"Operation Succeeded！",
"Prompt":"Prompt",
"OK":"OK",
"Cancel":"Cancel",
"Operation":"Operation",
"SrcCode":"Source Code",
"SwitchLayout":"Switch Layout",
"WebSiteCopyRight":"WebSiteCopyRight",
"PromptToConfirm":"Please confirm",
"PromptAuth":"Authorization propmpt",
"ConfirmDelete":"Are you sure to delete {0}?",
"ConfirmDeleteMulti":"Are you sure to delete the selected records?",
"NoRowSelected":"Please select a row first！",
"ExperienceDBError":"(Delete a department with users to experiencing the auto-handling of DB exceptions - without any additional code)",
"ClickMenu":"(On a phone, click top-right button to open the menu)",
"ToChildren":"Beloved software techniques to all beloved children",
"Author":"Author: Rainy Zhu, rainyyu@sina.com",
"Diagram":"RainyArch architecture",
"MvcDiagram":"Both sides as a whole MVC - makes simple coding patterns",
"Diagram1":"* Blue parts stand for the major structure of the frameworks - ProjectBase. Sky blue parts stand for general solutions and components for application-wide functionalities.",
"Diagram2":"* Those transparent boxes stand for code to be written by developers whose work will be light-weight with the support of the frameworks, concerned mainly about business data and logic, without technical intricacies.",
"MvcDiagram1":"1.A link to a State triggers on clicking switching to the State of which the framework looks for the definition.",
"MvcDiagram2":"2.According to the state definition, the framework requests to get a view fragment from the server or call the server Action method.",
"MvcDiagram3":"3.The server returns a view.",
"MvcDiagram4":"4.The server returns a vm.",
"MvcDiagram5":"5.The serverVm is bound to the clientVm(c.vm) by the framework and the clientVm includes the entire structure and data of the serverVm.",
"MvcDiagram6":"6.Without JavaScript, clicking the button triggers submitting the clientVm to the designated server Action.",
"MvcDiagram7":"7.The result returned from the server is handled by the client-side framework.",
"MvcDiagram8":"8.Programmatically handle an event on client side and submit the clientVm to the designated server Action.",
"MvcDiagram9":"9.The result returned from the server is received and handled by client-side asynchronous scripts.",
"MvcDiagram10":"10.DB exceptions, server-side validation and authorization exceptions are handled by the framework.",
"RainyArchIntro":"RainyArch for Agile Dev",
"TryRainyArch":"WYSIWYG - Try it!",
"WhatIsRainyArch":"What's RainyArch?",
"WhatIsRainyArchmore":"RainyArch is a set of frameworks and application prototypes for Agile Development with Java and .Net and JavaScript.",
"Opensource":"Open Source on GitHub",
"Why1":"Agile development",
"Why1more":"The prototypes get the first round iteration of your application development done within a day. Customers and engineers will directly see the system running and they can discuss requirements and design by actually using the evolving application from the very beginning and in every subsequent iteration. They can really work together based on a same thing - the target software, instead of using some mockup like static pages for customers and a pile of incomplete code files for engineers. And that is right one of the principles of Agile Development. More for Agile Development, RainyArch also comes along with automation tools to generate database objects and CURD code files from UI to back-end DAO all from a same design document. Add those auto-generated stuffs to the project and build, all primitive functions will be running on a clicking. It's really agile, isn't it?",
"Why2":"Double platforms",
"Why2more":"Coding experiences will be the same for Java and .Net platform. The two server-side frameworks employ identical architectures and design patterns, and provide same programming interfaces and coding patterns to the application level. Application code on one platform has its counterpart on another platform even on line-to-line basis. With that and the same client-side framework, developers can easily do projects on both platforms.",
"Why3":"Framework on frameworks",
"Why3more":"As top-level frameworks, RainyArch encapsulates and integrates popular general frameworks such as Hibernate, IOC, MVC, Angular, and employs design patterns and concepts and best practices, to make the programming interfaces simpler but more powerful.",
"Why4":"Double sides binding",
"Why4more":"The server-side and client-side frameworks can be seamlessly integrated as a whole where bidirectional data-binding between both sides works automatically, and even same with the binding between the two MVC structures on both sides. Taking the \"auto-Ajax\" feature for instance, without a single line of JavaScript, you can get a button to submit an Ajax request on clicking and deal with the response from the server automatically.",
"Why5":"Simpler is better",
"Why5more":"The frameworks simplify programming interfaces and standardize coding patterns. Developers are saved from making technical choices and solving technical problems so that they can focus on implementing business logic. Those frameworks constrain and standardize developers' work and cut down chances they could make mistakes, based on code instead of documents. Thus, quality of applications is ensured by the frameworks and not dependent on individual developers. On the other hand, the frameworks are compatible and supportive with advanced programming directly against any lower-level frameworks.",
"Why6":"Less is more",
"Why6more":"Solutions for well-known application-wide problems are implemented within the frameworks. They are auto-mapping, auto-IOC, auto-dictionary, authentication and authorization, table sorting and paging, auto-catching of db exceptions, languages switching, breadcrumb navigation, etc. In most cases, not a single line of client code is needed to turn those on. The frameworks are meant to reduce developers' code as much as possible.",
"Why7":"Taking advantage of new language features",
"Why7more":"RainyArch employs latest languages (C#4.0/java8) features such as generic, linq, lambda expression, anonymous class, annotation, properties declaration, extension functions, etc. Code is cleaner and more elegant and easier to write and maintain with them. Developers can follow to upgrade their language skill at a fast pace.",
"Why8":"Final is stable",
"Why8more":"RainyArch frameworks are the outermost frameworks that encapsulate other frameworks and programming techniques, so that they can isolate updates/upgrades to other frameworks and embrace upcoming new techniques but still provide stable, compatible and consistent interfaces to application code. They minimize cost of learning and changing for developers.",
"Why9":"Mature and improving",
"Why9more":"The author has been doing programming and architecting work for more than 20 years, and has built frameworks for multi programming languages and platforms, which have all been employed in enterprise projects and got verified. With RainyArch being open source, hope it to be improved and augmented by a community and make developer enjoy programming and applications development get done with high quality.",

"DisplayName":"-------------------------------------------数据项label",
"Name":"Name",
"Corp":"Company",
"CorpCode":"Company Code",
"Corp_Code":"Code",
"Corp_Name":"Name",
"Corp_Phone":"Phone",
"Dept":"Department",
"Dept_Code":"Department Code",
"Dept_Name":"Department Name",
"User":"User",
"User_Code":"User Name",
"User_Password":"Password",
"User_Name":"Name",
"User_CellPhone":"CellPhone",
"User_IsActive":"Is Active",
"User":"User",
"Task":"Task",
"Task_Name":"Subject",
"Task_UserID":"Creator",
"Task_CreateDate":"Creation Date",
"Task_PlanBeginDate":"Schedule to begin",
"Task_PlanEndDate":"Schedule to end",
"Task_BeginDate":"Began on",
"Task_EndDate":"Ended on",
"Task_Status":"Status",
"TaskItem":"Task item",
"TaskItem_Brief":"Brief",
"TaskItem_UserID":"Responsible Person",
"TaskItem_Requirement":"Requirement",
"TaskItem_Record":"Record",
"TaskItem_KeyInfo":"Keywords",
"TaskItem_CreateDate":"Creation Date",
"TaskItem_ActionDate":"Action Date",
"TaskItem_Status":"Status",
"TaskItem_OrderNum":"Order Number",
"CorpContact":"Contact Person",
"CorpContact_Phone":"Phone",
"CorpContact_Name":"Name",
"CorpContact_Position":"Position",

"DBError":"------------------------------------------------数据库操作错",
"FK_GN_Dept_GN_Corp":"Can't delete companies with related departments existing.",
"FK_GN_User_GN_Dept":"Can't delete departments with related users existing.",
"UQ_GN_Corp":"Duplicate name!",
"UQ_GN_Dept":"Duplicate name!",
"UQ_GN_Func":"Duplicate name!",
"UQ_GN_User":"Duplicate name!",
"UQ_TA_Task":"Duplicate subject!",
"UQ_TA_TaskItem":"Duplicate brief!",
"FK_TA_TaskItem_TA_Task":"Can't delete tasks with related items existing.",


"ValMsg":"------------------------------------------------自定义验证信息",
"Val_ConfirmPassword":"Must enter the same password to confirm!",

"OtherMsg":"------------------------------------------------其他",
"Note_AutoSrc_addfilter":"Additional source code  to add a filter. ",
"Note_AutoSrc":"Full source code for CURD functionalities, from UI to data accessing, 7 code files all auto-generated by the code-generation tool",
"Note_InLineEditSrc":"Additional source code to add in-line editing functionality",
"Note_CollectionAndMultiViewsSrc":"Source code for parent-children records editing and communication between multiple views of a state",
"MultiViewsSample":"Sample for multiple-views state and parent-children records editing",
"AnotherView":"Another View",
"AnotherViewDescription":"This is another view.",
"MultiViewsLayoutDescription":"This is the view of the parent state.",
"EditViewMsg":"Message from the Editing view (receive when a contact get deleted)",
"ContactDeleted":"Contact deleted:",
"EditView":"Editing View"
}