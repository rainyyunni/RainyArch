{
"Message":"-----------------------------------------------按钮文本和提示信息",

"Chinese":"中文",
"English":"English",

"Search":"搜索",
"Delete":"删除",
"Save":"保存",
"Select":"选择",
"Navrefresh":"刷新",
"Navback":"返回",
"List":"列表",
"Edit":"编辑",
"Add":"新增",
"Search":"查询",
"PassEdit":"修改密码",
"Save_Successfully":"保存成功",
"true":"是",
"false":"否",
"any":"不限",
"-choose-":"---选择---",
"-all-":"---全部---",
"Current":"当前",
"Page":"页",
"PrevPage":"上页",
"NextPage":"下页",
"LastPage":"尾页",
"FirstPage":"首页",
"Total":"共",
"EachPage":"每页",
"Line":"行",
"Record":"条记录",
"Gotopage":"转到",
"AuthFailure":"没有权限！",
"File_NotFound":"文件不存在！",
"ImageFileAllowed":"仅允许上传图片文件!",
"Login_AlreadyIn":"用户已登录，账号正在使用中！",
"Login_IsNotActive":"账号已禁用！",
"Login_Wrong":"用户名或密码错误，请重新输入！",
"OldPassword_Wrong":"原密码输入错误!",
"OperationSucceed":"操作成功！",
"PdfFileAllowed":"仅允许上传Pdf文件!",
"ResetPassword_Succeed":"密码重置成功！",
"UploadNoFile":"未得到上传文件!",
"Prompt":"提示",
"OK":"确定",
"Cancel":"取消",
"Operation":"操作",
"SrcCode":"源码",
"SwitchLayout":"切换排列",
"WebSiteCopyRight":"版权所有 天津纯真年代文化传播有限公司",
"PromptToConfirm":"请确认",
"PromptAuth":"权限提示",
"ConfirmDelete":"确定要删除{0}吗",
"ConfirmDeleteMulti":"确定要删除所选记录吗?",
"NoRowSelected":"未选择任何记录！",
"ExperienceDBError":"(删除包含用户的部门，体验自动数据库错误处理--不需程序员写任何代码)",
"ClickMenu":"(手机用户请点右上角按钮打开菜单)",
"ToChildren":"谨以我热爱的软件技术献给敬爱的孩子们",
"Author":"作者：朱艳萍 , rainyyu@sina.com",
"Diagram":"RainyArch产品架构图",
"MvcDiagram":"两端MVC双向一体的简捷编程模式",
"Diagram1":"* 上图蓝色部分为框架代码主要结构,ProjectBase. 浅蓝色部分为框架上的项目应用业务功能（可直接使用，在其中继续添加功能模块）",
"Diagram2":"* 上图黑白文本部分为添加功能模块时编程人员需编写的代码结构，可见其在本框架的支持下成为轻量级的部分工作，且仅与业务相关，而不需考虑技术问题。",
"MvcDiagram1":"1.在页面放置state链接，当点击时要转换state，框架先查找state的定义",
"MvcDiagram2":"2.框架根据state定义请求服务器的相应页面文件或调用服务器action方法",
"MvcDiagram3":"3.服务器返回view",
"MvcDiagram4":"4.服务器返回vm",
"MvcDiagram5":"5.serverVm由框架自动绑定到clientVm(c.vm)上, clientVm的结构和数据值完全包含serverVm",
"MvcDiagram6":"6.无js的自动点击提交clientVm到服务器的action。",
"MvcDiagram7":"7.服务器返回的结果由客户端框架自动处理。",
"MvcDiagram8":"8.在客户端事件中处理和提交clientVm到服务器的action。",
"MvcDiagram9":"9.服务器返回的结果由客户端异步脚本接收并处理。",
"MvcDiagram10":"10.操作错误、服务器验证错、访问权限错等由框架自动处理",
"RainyArchIntro":"RainyArch强力支持敏捷开发",
"TryRainyArch":"所见即所得 —— 用吧!",
"WhatIsRainyArch":"软件开发，是一行行千头万绪地堆代码，还是在成熟高质的现成品上增量开发?",
"WhatIsRainyArchmore":"RainyArch是一套应用开发框架及建立在其上的应用系统原型，用于支持使用Java、.Net和Javascript进行软件系统敏捷开发。",
"Opensource":"开源",
"Why1":"即装、即用、可交付的成品Web应用系统  + 自动生成全套代码",
"Why1more":"RainyArch是用于开发以数据库为中心、信息管理功能为主的web应用软件项目的技术框架，更同时包括可运行的完整项目常用功能模块（登录、菜单、系统管理、全局功能框架与组件等）和自动代码演示模块，即它是一个完整的WebApp系统。本网站的整个系统，就是您将得到的成品。更现成的是，您只需提供数据库详细设计文档，我就可以为您生成数据库以及实现所有模块CURD功能的代码文件（从UI到数据访问全套），帮您快速整合出您的整个项目的功能原型——不是静态页面原型，而是真正可交付的系统原型——让您的客户马上见到、用上实物，直观地探讨需求，降低沟通成本和需求变更成本。在此基础上开发无论是变更还是改进，都能快速进行。",
"Why2":"支持.Net和Java双平台开发",
"Why2more":"RainyArch包括NetNgArch和JavaNgArch两个版本，分别支持在.Net和Java平台上开发，客户端部分均建构在Angular上（或可选JQuery）。服务器端NetNgArch采用C#4+NHibernate+Castle Windor IOC+ASP.Net MVC+spark/razor，JavaNgArch采用Java8+Hibernate+SpringIOC+Spring MVC+JSP. 两框架的内部结构一致，对上层编程的开发接口一致。您不必为不同平台的项目分别配备程序员了，在RainyArch上，每个程序员都能轻松成为双平台开发者。",
"Why3":"整合封装先进的通用技术框架",
"Why3more":"Hibernate、IOC、Mvc、Angular这些先进的通用技术框架，能否在具体项目中被正确和充分使用，受限于开发人员的技术水平。而本框架由资深软件工程师、架构师根据多年项目经验设计开发，进一步包装了Hibernate+IOC+Mvc+Angular的编程接口，建立起web应用的技术域通用对象模型和简捷编程模式，包含多个共性技术问题的解决方案，为程序员提供了一个高质量功能强的编程框架和代码基础，保证了通用框架技术正确高效应用于软件开发，使项目易开发、易维护。",
"Why4":"服务器和客户端框架技术整合，两端mvc双向绑定",
"Why4more":"目前通用的技术框架，大多只针对服务器或客户端二者之一，而本框架将两端技术整合一体，使编程模式更流畅优雅，无断层感，开发人员可将两端看作一体来开发，并轻松实现服务器与客户端的数据双向绑定、甚至是两端两个mvc结构的双向绑定。如，自动ajax功能，无需程序员写任何js脚本，就可在点击时自动提交请求并处理响应结果。",
"Why5":"通过简化编程接口、规范编程模式，有效实现项目的进度与质量控制",
"Why5more":"开发人员在此框架上进行开发，其编程接口大大简化，编程模式固定且简单，开发人员不必处理技术性问题，不再陷入技术方法选择的迷惑与纠结中，而是将精力用于实现业务逻辑上。而框架本身对开发人员的编程模式起到了规范化标准化的统一和限定作用，使其不易出错，保证了项目开发水平的高度不受人员水平的制约。同时也灵活支持穿过框架使用原生技术的高级用法。",
"Why6":"共性问题最佳解决",
"Why6more":"本框架包含了多个共性问题的解决方案，如自动映射、自动IOC、自动字典、安全控制，表格排序与分页、数据库错误处理、本地化、面包屑导航的刷新返回等等，均内置在框架中实现，多数情况下一行代码都不用程序员写。力图将程序员要写的代码减到最少。",
"Why7":"引领程序员语言技术升级",
"Why7more":"本框架跟进技术更新，不仅利用最先进的通用框架，还充分利用编程语言（C#4.0/java8）新特性，如泛型，linq，lambda表达式，匿名类，标记，属性声明、扩展方法等等，引领程序员语言技术升级，代码更为简洁强大。还有自动化开发工具直接生成全部常规代码，无需修改即可编译运行。程序员在自动生成的规范化高质量代码上再做定制编程，技术水平加速提高。",
"Why8":"最贴近程序员的框架，以不变应万变",
"Why8more":" 软件开发涉及的多种框架技术，不断会进行版本升级，以及新技术不断进入，往往使得软件企业为程序员的学习培训和适应变化付出成本。本框架整合封装各种技术，对应用开发程序员提供简单稳定的编程接口。将多种技术的升级变化最大限度地控制在框架内部，不再影响程序员。",
"Why9":"产品成熟，历经检验",
"Why9more":"本框架作者多年从事软件开发和架构设计。对多种语言技术都进行过架构设计，并不断升级，所设计的多个框架、多个版本均经实际项目应用得到检验和完善。",

"Menu":"-----------------------------------------------menu",
"Introduction":"概述",
"Guide":"指南",
"APIReference":"API参考文档",
"Architecture":"代码框架结构",
"ProjectSetup":"项目搭建",



"End":"End"
}